apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: gitea
  namespace: argocd
spec:
  destination:
    namespace: gitea
    server: https://kubernetes.default.svc
  project: default
  source:
    repoURL: https://dl.gitea.io/charts/
    targetRevision: 5.0.0
    chart: gitea
    helm:
      values: |
        image:
          repository: gitea/gitea
          tag: 1.15.8
          pullPolicy: Always
          rootless: true # only possible when running 1.14 or later
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          # Add the SYS_CHROOT capability for root and rootless images if you intend to
          # run pods on nodes that use the container runtime cri-o. Otherwise, you will
          # get an error message from the SSH server that it is not possible to read from
          # the repository.
          # https://gitea.com/gitea/helm-chart/issues/161
            add:
              - SYS_CHROOT
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        service:
          http:
            type: ClusterIP
            port: 3000
            clusterIP: None
          ssh:
            type: ClusterIP
            port: 22
            clusterIP: None
        ingress:
          enabled: false
          annotations:
            kubernetes.io/ingress.class: nginx
            cert-manager.io/cluster-issuer: letsencrypt-prod
          hosts:
            - host: gitea.happylittlecloud.ca
              paths:
                - path: /
                  pathType: Prefix
          tls:
          - hosts:
            - gitea.happylittlecloud.ca
            secretName: gitea-tls

        resources: {}
          # We usually recommend not to specify default resources and to leave this as a conscious
          # choice for the user. This also increases chances charts run on environments with little
          # resources, such as Minikube. If you do want to specify resources, uncomment the following
          # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
          #   memory: 128Mi
        ## Use an alternate scheduler, e.g. "stork".
        ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
        ##
        # schedulerName:
        statefulset:
          env: []
            # - name: VARIABLE
            #   value: my-value
          terminationGracePeriodSeconds: 60
          labels: {}
        persistence:
          enabled: true
          # existingClaim:
          size: 10Gi
          accessModes:
            - ReadWriteOnce
          labels: {}
          annotations: {}
          # storageClass:
          # subPath:
        # additional volumes to add to the Gitea statefulset.
        extraVolumes: []
        # - name: postgres-ssl-vol
        #   secret:
        #     secretName: gitea-postgres-ssl

        # additional volumes to mount, both to the init container and to the main
        # container. As an example, can be used to mount a client cert when connecting
        # to an external Postgres server.
        extraVolumeMounts: []
        # - name: postgres-ssl-vol
        #   readOnly: true
        #   mountPath: "/pg-ssl"

        # bash shell script copied verbatim to the start of the init-container.
        initPreScript: ""
        #
        # initPreScript: |
        #   mkdir -p /data/git/.postgresql
        #   cp /pg-ssl/* /data/git/.postgresql/
        #   chown -R git:git /data/git/.postgresql/
        #   chmod 400 /data/git/.postgresql/postgresql.key

        # Configure commit/action signing prerequisites
        signing:
          enabled: false
          gpgHome: /data/git/.gnupg

        gitea:
          admin:
            existingSecret: gitea-admin-secret

          # Either specify inline `key` and `secret` or refer to them via `existingSecret`
          oauth: []
            # - name: 'OAuth 1'
            #   provider:
            #   key:
            #   secret:
            #   existingSecret:
            #   autoDiscoverUrl:
            #   useCustomUrls:
            #   customAuthUrl:
            #   customTokenUrl:
            #   customProfileUrl:
            #   customEmailUrl:

          config:
            database:
              DB_TYPE: "sqlite3"
          #  APP_NAME: "Gitea: Git with a cup of tea"
          #  RUN_MODE: dev
          #
          #  server:
          #    SSH_PORT: 22
          #
          #  security:
          #    PASSWORD_COMPLEXITY: spec

          additionalConfigSources:
          # Configure Storage backend
          - secret:
              secretName: spaces-secret
          #- secret:
          #    secretName: gitea-db-secret
          #   - configMap:
          #       name: gitea-app-ini-plaintext

          podAnnotations: {}

          # Modify the liveness probe for your needs or completely disable it by commenting out.
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 200
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10

          # Modify the readiness probe for your needs or completely disable it by commenting out.
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3

          # # Uncomment the startup probe to enable and modify it for your needs.
          # startupProbe:
          #   tcpSocket:
          #     port: http
          #   initialDelaySeconds: 60
          #   timeoutSeconds: 1
          #   periodSeconds: 10
          #   successThreshold: 1
          #   failureThreshold: 10

        memcached:
          enabled: true
          service:
            port: 11211

        postgresql:
          enabled: false
          global:
            postgresql:
              postgresqlDatabase: gitea
              postgresqlUsername: gitea
              postgresqlPassword: gitea
              servicePort: 5432
          persistence:
            size: 10Gi
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
